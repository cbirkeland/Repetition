
@model OnlineStore.Models.WeatherViewModelz

<h1>Väder</h1>

<div class="row">
    <div class="col-md-4">

        <form asp-action="GetWeather">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="Latitude" class="control-label"></label>
                <input asp-for="Latitude" asp-format="{0:N3}" class="form-control" />
            </div>

            <div class="form-group">
                <label asp-for="Longitude" class="control-label"></label>
                <input asp-for="Longitude" asp-format="{0:N3}" class="form-control" />
            </div>

            <div class="form-group">
                <input type="submit" value="Ok" class="btn btn-default" />
            </div>

        </form>
    </div>
</div>

/***********/    

  <table class="table">
                    <thead>
                    <tr>
                        <th>Tid</th>
                        <th>Temperatur</th>
                    </tr>
                    </thead>
                    @foreach (var timeTemp in Model.TimeTemps)
                    {
                        <tr>
                            <td>@timeTemp.Time.ToString("HH:mm")</td>
                            <td>@timeTemp.Temp</td>
                        </tr>
                    }

                </table>

/***********/    

string page = $"https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/{sLongitude}/lat/{sLatitude}/data.json";

https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/18/lat/59/data.json

/***********/

        public string GetMeteorologicalForecast(decimal longitude, decimal latitude)
        {
            string sLongitude = Math.Round(longitude, 3).ToString(new CultureInfo("en"));
            string sLatitude = Math.Round(latitude, 3).ToString(new CultureInfo("en"));

            string url = $"https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/{sLongitude}/lat/{sLatitude}/data.json";


            using (HttpClient client = new HttpClient())
            using (HttpResponseMessage response = client.GetAsync(url).Result)
            using (HttpContent content = response.Content)
            {
                if (!response.IsSuccessStatusCode)
                    throw new Exception(response.ReasonPhrase);
                string result = content.ReadAsStringAsync().Result;
		return result;
                // return JsonConvert.DeserializeObject<RootObject>(result);

            
            }


        }


/***********/


namespace OnlineStore.Models.Smhi
{
    public class Geometry
    {
        public string type { get; set; }
        public List<List<double>> coordinates { get; set; }
    }

    public class Parameter
    {
        public string name { get; set; }
        public string levelType { get; set; }
        public int level { get; set; }
        public string unit { get; set; }
        public List<double> values { get; set; }
    }

    public class RootObject
    {
        public DateTime approvedTime { get; set; }
        public DateTime referenceTime { get; set; }
        public Geometry geometry { get; set; }
        public List<TimeSery> timeSeries { get; set; }
    }

    public class TimeSery
    {
        public DateTime validTime { get; set; }
        public List<Parameter> parameters { get; set; }
    }
}


/*********/

        public List<TimeTemp> FilterTemperature(RootObject result, DateTime date)
        {
            return result.timeSeries.Where(x => x.validTime.Day == date.Day).Select(x => new TimeTemp
            {
                Temp = x.parameters.Single(y => y.name == "t").values.First(),
                Time = x.validTime

            }).ToList();
        }



/*********/

        public string ErrorMessage { get; set; }

/*********/

            try
            {
                ...
                ...
            }
            catch (Exception ex)
            {
                vm.ErrorMessage = ex.Message;
            }


/*********/

        @if (Model.ErrorMessage != null)
        {
        	<div class="alert alert-danger">Fel: @Model.ErrorMessage</div>
        } 